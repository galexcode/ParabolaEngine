#ifndef ROCKETDECORATORANIMATOR_H
#define ROCKETDECORATORANIMATOR_H

#include "Platform.h"
#include <Rocket/Core/Decorator.h>
#include <Rocket/Core/DecoratorInstancer.h>
#include <Rocket/Core/PropertyDictionary.h>
#include <Rocket/Core.h>
#include <string>
using namespace std;

namespace pE{
	class RocketDecoratorAnimatorInstancer;

	class PARABOLA_API RocketDecoratorAnimator : public Rocket::Core::Decorator{
	public:
		// Called on a decorator to generate any required per-element data for a newly decorated element.
		// @param[in] element The newly decorated element.
		// @return A handle to a decorator-defined data handle, or NULL if none is needed for the element.
		virtual Rocket::Core::DecoratorDataHandle GenerateElementData(Rocket::Core::Element* element);

		// Called to release element data generated by this decorator.
		// @param[in] element_data The element data handle to release.
		virtual void ReleaseElementData(Rocket::Core::DecoratorDataHandle element_data);

		// Called to render the decorator on an element.
		// @param[in] element The element to render the decorator on.
		// @param[in] element_data The handle to the data generated by the decorator for the element.
		virtual void RenderElement(Rocket::Core::Element* element,
								   Rocket::Core::DecoratorDataHandle element_data);
	};



	class PARABOLA_API RocketDecoratorAnimatorInstancer: public Rocket::Core::DecoratorInstancer{
	public:
		RocketDecoratorAnimatorInstancer();
		// Instances a decorator given the property tag and attributes from the RCSS file.
		// @param[in] name The type of decorator desired.
		// @param[in] properties All RCSS properties associated with the decorator.
		// @return The decorator if it was instanced successful, NULL if an error occured.
		virtual Rocket::Core::Decorator* InstanceDecorator(const Rocket::Core::String& name,
									const Rocket::Core::PropertyDictionary& properties);

		// Releases the given decorator.
		// @param[in] decorator Decorator to release.
		virtual void ReleaseDecorator(Rocket::Core::Decorator* decorator);

		// Releases the instancer.
		virtual void Release();

	};
};

#endif